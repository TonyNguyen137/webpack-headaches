@use '../abstracts' as *;
@use 'sass:map';
@use 'sass:list';

@if $enable-container-classes {
  // Single container class with breakpoint max-widths
  .container,
  // 100% wide container at all breakpoints
  .container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint, $container-max-width in $container-max-widths {
    .container-#{$breakpoint} {
      @extend .container-fluid;
    }

    // The max-container for the last breakpoint is redundant because it matches the default container's size.
    $last-breakpoint: list.nth(map.keys($container-max-widths), -1);
    @if ($enable-max-container-classes and $breakpoint != $last-breakpoint) {
      .container-max-#{$breakpoint} {
        @extend .container-fluid;
      }
    }

    // Single fluid container class with max-widths
    .container-fluid-#{$breakpoint} {
      @include make-container-fluid($container-max-width);
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name, $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          .container {
            @extend %responsive-container-#{$breakpoint};
          }

          //Once the current breakpoint is reached, stop extending
          @if ($breakpoint == $name) {
            $extend-breakpoint: false;
          }
        }

        // create max containers up to their breakpoint
        @if ($enable-max-container-classes) {
          @if (breakpoint-infix($name, $grid-breakpoints) != '') {
            // @debug breakpoint-infix($name, $grid-breakpoints);

            $condition: map.get($grid-breakpoints, $name) >=
              map.get($grid-breakpoints, $breakpoint) and
              $name !=
              $last-breakpoint;

            @if ($condition) {
              .container-max#{breakpoint-infix($name, $grid-breakpoints)} {
                @extend %responsive-container-#{$breakpoint};
              }
            }
          }
        }
      }
    }
  }
}

// custom containers below

// custom containers below
// .wrapper {
//   width: 100%;
//   max-width: px-to-rem(1700);
//   margin-inline: auto;
//   padding-inline: px-to-rem(12);
// }

// .px-12 {
//   padding-inline: px-to-rem(12);
// }

// @media (min-width: 1200px) {
//   .px-xl-0 {
//     padding-inline: 0;
//   }
// }
